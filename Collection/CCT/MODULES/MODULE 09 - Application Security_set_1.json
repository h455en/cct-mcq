[
  {
    "question_number": 1,
    "question": "During a code review, you find that user-supplied input is directly used in an SQL query without any sanitization. What type of vulnerability is this, and what is the recommended mitigation?",
    "options": [
      "Cross-Site Scripting (XSS); output encoding",
      "SQL Injection; parameterized queries",
      "Cross-Site Request Forgery (CSRF); anti-CSRF tokens",
      "Denial of Service (DoS); rate limiting"
    ],
    "correct_index": "B",
    "explanation": "Directly using user input in SQL queries creates a SQL Injection vulnerability. Parameterized queries prevent this by treating input as data, not code."
  },
  {
    "question_number": 2,
    "question": "A web application displays error messages containing sensitive information like file paths and database connection strings. What secure coding practice is violated, and what's the solution?",
    "options": [
      "Input validation; implement strict input validation rules.",
      "Output encoding; encode all output displayed to the user.",
      "Error/Exception handling; implement generic error messages and log detailed errors securely.",
      "Secure session cookies; use HTTPOnly and Secure flags."
    ],
    "correct_index": "C",
    "explanation": "Exposing detailed error messages violates secure error handling. Generic messages should be displayed to users, while detailed errors are logged securely for debugging."
  },
  {
    "question_number": 3,
    "question": "Your team is developing a web application that handles user authentication. What two HTTP headers are crucial for securing session cookies?",
    "options": [
      "Content-Type and Content-Length",
      "HTTPOnly and Secure",
      "X-Frame-Options and Content-Security-Policy",
      "Cache-Control and Expires"
    ],
    "correct_index": "B",
    "explanation": "HTTPOnly prevents client-side scripts from accessing the cookie, and Secure ensures the cookie is only sent over HTTPS."
  },
  {
    "question_number": 4,
    "question": "During threat modeling, you identify a scenario where an attacker could potentially manipulate the URL to access unauthorized resources. Which threat modeling technique is most helpful in analyzing this?",
    "options": [
      "STRIDE (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege)",
      "DREAD (Damage, Reproducibility, Exploitability, Affected Users, Discoverability)",
      "PASTA (Process for Attack Simulation and Threat Analysis)",
      "VAST (Visual, Agile, and Simple Threat modeling)"
    ],
    "correct_index": "A",
    "explanation": "STRIDE helps identify threats based on specific categories, including Elevation of Privilege (unauthorized access)."
  },
  {
    "question_number": 5,
    "question": "Your application uses a third-party library. A vulnerability is discovered in that library. What is the most effective way to mitigate the risk?",
    "options": [
      "Obfuscate the library's code.",
      "Update the library to the latest patched version.",
      "Disable all security features in the application.",
      "Hide the library's files from the web server."
    ],
    "correct_index": "B",
    "explanation": "Updating to the patched version is the most effective way to address known vulnerabilities in third-party libraries."
  },
  {
    "question_number": 6,
    "question": "You are performing static analysis on your application's source code. What type of vulnerabilities is SAST most effective at finding?",
    "options": [
      "Runtime errors and performance bottlenecks.",
      "SQL injection, XSS, and other code-level vulnerabilities.",
      "Network vulnerabilities and server misconfigurations.",
      "Authentication and authorization flaws."
    ],
    "correct_index": "B",
    "explanation": "SAST analyzes source code to identify potential vulnerabilities before the application is deployed."
  },
  {
    "question_number": 7,
    "question": "You are performing dynamic analysis on a running web application. What testing technique involves providing invalid or unexpected input to the application to discover vulnerabilities?",
    "options": [
      "Static Application Security Testing (SAST)",
      "Fuzz testing",
      "Penetration testing",
      "Code review"
    ],
    "correct_index": "B",
    "explanation": "Fuzz testing (fuzzing) involves providing malformed or random input to identify input validation vulnerabilities and unexpected behavior."
  },
  {
    "question_number": 8,
    "question": "You need to prevent users from uploading executable files to your web server. What security measure is most appropriate?",
    "options": [
      "Input validation with file type checking and whitelisting.",
      "Output encoding.",
      "Error handling.",
      "Secure session cookies."
    ],
    "correct_index": "A",
    "explanation": "Input validation, specifically file type checking and whitelisting, can prevent the upload of unwanted file types."
  },
  {
    "question_number": 9,
    "question": "Which OWASP project provides a list of the top web application security risks?",
    "options": [
      "OWASP ZAP",
      "OWASP Top 10",
      "OWASP SAMM",
      "OWASP ASVS"
    ],
    "correct_index": "B",
    "explanation": "The OWASP Top 10 is a widely recognized list of the most critical web application security risks."
  },
  {
    "question_number": 10,
    "question": "Your organization wants to improve its software security maturity. Which framework provides a maturity model for software assurance?",
    "options": [
      "BSIMM (Building Security In Maturity Model)",
      "NIST Cybersecurity Framework",
      "ISO 27001",
      "COBIT"
    ],
    "correct_index": "A",
    "explanation": "BSIMM provides a framework for organizations to measure and improve their software security practices."
  },
    {
    "question_number": 11,
    "question": "During a penetration test, the tester discovers a vulnerability that allows them to execute arbitrary code on the server. What type of testing likely missed this vulnerability?",
    "options": [
      "SAST (Static Application Security Testing)",
      "DAST (Dynamic Application Security Testing)",
      "Code review",
      "All of the above could have potentially missed it."
    ],
    "correct_index": "D",
    "explanation": "While DAST is often better at finding runtime vulnerabilities, a thorough code review or SAST with proper configuration could also have identified it. It's possible for all to miss it if not done correctly."
  },
  {
    "question_number": 12,
    "question": "You need to protect your web application from common attacks like SQL injection and cross-site scripting. What is a suitable solution?",
    "options": [
      "Intrusion Detection System (IDS)",
      "Web Application Firewall (WAF)",
      "Antivirus software",
      "Firewall"
    ],
    "correct_index": "B",
    "explanation": "WAFs are specifically designed to protect web applications from common web attacks."
  },
  {
    "question_number": 13,
    "question": "What is the purpose of code signing?",
    "options": [
      "To encrypt the source code.",
      "To ensure the integrity and authenticity of software.",
      "To improve application performance.",
      "To prevent unauthorized access to the application's database."
    ],
    "correct_index": "B",
    "explanation": "Code signing uses digital signatures to verify the software's origin and ensure it hasn't been tampered with."
  },
  {
    "question_number": 14,
    "question": "Your development team is adopting a 'shift-left' security approach. What does this mean?",
    "options": [
      "Moving security testing to the end of the development lifecycle.",
      "Integrating security practices early in the development lifecycle.",
      "Outsourcing all security testing to a third-party vendor.",
      "Ignoring security concerns during development."
    ],
    "correct_index": "B",
    "explanation": "Shift-left emphasizes incorporating security considerations from the beginning of the development process."
  },
  {
    "question_number": 15,
    "question": "What is the primary benefit of using parameterized queries or stored procedures?",
    "options": [
      "Improved database performance.",
      "Prevention of SQL injection vulnerabilities.",
      "Simplified database administration.",
      "Enhanced user authentication."
    ],
    "correct_index": "B",
    "explanation": "Parameterized queries and stored procedures prevent SQL injection by treating user input as data, not executable code."
  },
  {
    "question_number": 16,
    "question": "You are implementing a bug bounty program. What is the main objective?",
    "options": [
      "To replace internal security testing efforts.",
      "To incentivize external security researchers to find vulnerabilities.",
      "To reduce the cost of security tools.",
      "To eliminate all security risks in the application."
    ],
    "correct_index": "B",
    "explanation": "Bug bounty programs leverage the skills of external researchers to discover vulnerabilities that internal teams might miss."
  },
  {
    "question_number": 17,
    "question": "Your web application handles user-uploaded files. What security measure is crucial to prevent directory traversal attacks?",
    "options": [
      "Input validation to sanitize file names and paths.",
      "Output encoding.",
      "Secure session management.",
      "Proper error handling."
    ],
    "correct_index": "A",
    "explanation": "Sanitizing file names and paths prevents users from manipulating them to access files outside the intended directory."
  },
  {
    "question_number": 18,
    "question": "What is the purpose of application sandboxing?",
    "options": [
      "To improve application performance.",
      "To isolate applications from the operating system and other applications.",
      "To encrypt application data.",
      "To prevent unauthorized access to the application's source code."
    ],
    "correct_index": "B",
    "explanation": "Sandboxing creates a restricted environment for applications to run in, limiting the impact of potential vulnerabilities."
  },
  {
    "question_number": 19,
    "question": "You are using a web application security scanner. What type of testing does this tool typically perform?",
    "options": [
      "Static Application Security Testing (SAST)",
      "Dynamic Application Security Testing (DAST)",
      "Manual code review",
      "Penetration testing by a human tester"
    ],
    "correct_index": "B",
    "explanation": "Web application security scanners perform DAST by interacting with the running application."
  },
  {
    "question_number": 20,
    "question": "What is the purpose of using a proxy-based security testing tool?",
    "options": [
      "To analyze source code for vulnerabilities.",
      "To intercept and modify HTTP/HTTPS traffic between the client and server.",
      "To perform network scans for open ports.",
      "To manage user access to the application."
    ],
    "correct_index": "B",
    "explanation": "Proxy tools allow testers to intercept and manipulate traffic to test for vulnerabilities like input validation flaws and session management issues."
  }
]